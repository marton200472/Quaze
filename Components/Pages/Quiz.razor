@page "/quiz/{quizId}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject SessionService sessionService
@inject SignInManager<User> signInManager
@inject UserManager<User> userManager
@inject ProtectedSessionStorage sessionStorage
@rendermode InteractiveServer

@layout Quaze.Components.Layout.QuizLayout

@if(State==LocalState.Joining) {
    <p>Joining...</p>
}

@if(State == LocalState.NotFound) {
    <p>Quiz not found</p>
}

@if(State == LocalState.NameSelect) {
    <EditForm Enhance Model="LocalParticipant" FormName="ParticipantNameForm" >
        

        <InputText class="@(NameIsTaken?"border border-danger":"")" @bind-Value="LocalParticipant.Name" placeholder="Username for this quiz"/>
        <button type="button" @onclick="NameSubmitted">Save</button>
    </EditForm>
}

@if(State == LocalState.Active) {
    <QuizView Session="Session" LocalParticipant="LocalParticipant" />
}



@code {
    [Parameter]
    public string quizId {get;set;}

    private LocalState State {get; set;} = LocalState.Joining;

    private bool NameIsTaken {get;set;} = false;

    private Session? Session {get; set;}

    private Participant LocalParticipant {get;set;} = new();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    private async Task NameSubmitted() {

        //check if name is available
        if(Session.Participants.Any(x=>x.Name == LocalParticipant.Name)) {
            NameIsTaken = true;
            return;
        }
        //await signInManager.SignInWithClaimsAsync(new IdentityUser() {UserName = Session.Id+LocalParticipant.Name},false ,new System.Security.Claims.Claim[] {new(Session.Id, LocalParticipant.Name)});
        Console.WriteLine(Session.Id + " " + LocalParticipant.Name);
        await sessionStorage.SetAsync(Session.Id, LocalParticipant.Name);
        Console.WriteLine("Signed in");
        Session.Participants.Add(LocalParticipant);
        State = LocalState.Active;
    }

    protected override async Task OnInitializedAsync() {
        //try to join session
        var session = sessionService.Sessions.FirstOrDefault(x=>x.Id == quizId);
        if(session is null) {
            State = LocalState.NotFound;
            return;
        }
        Session = session;
        
        var savedName = await sessionStorage.GetAsync<string>(Session.Id);
        if(savedName.Success) {
            var user = Session.Participants.FirstOrDefault(x=>x.Name == savedName.Value);
            if(user is not null) {
                LocalParticipant = user;
                State = LocalState.Active;
                return;
            }
        }

        State = LocalState.NameSelect;
    }

    enum LocalState {
        Joining, NotFound, NameSelect, Active, Disconnected
    }
}
