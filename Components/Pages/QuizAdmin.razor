@page "/admin/quiz/{sessionId}"
@inject SessionService sessionService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]
@inherits LatexComponentBase

@layout Quaze.Components.Layout.QuizLayout

@if(State == LocalState.Error) {
    <p>Error</p>
}

@if(State == LocalState.Active) {
    

    @if(Session.State == SessionState.WaitStart) {
        <div class="row w-100">
            <div class="row w-50 mx-auto">
                    <h1 class="text-center">Session Id: @Session.Id</h1>
                    <button @onclick="Session.StartQuiz">Start Quiz</button>
            </div>
            
        </div>
    }

    @if(Session.State == SessionState.QuestionActive || Session.State == SessionState.QuestionEnd) {
        var question = Session.Quiz.Questions[Session.QuestionIndex];
        <div class="container d-flex flex-column align-items-center py-3">
            <div class="mb-2 w-100 d-flex flex-column">
                <div class="w-100 d-flex justify-content-between mb-5">
                    <h2 class="align-self-center m-0">@question.Title</h2>
                    @if(Session.State == SessionState.QuestionActive) {
                        <Countdown Session="Session" />
                    }
                    
                </div>
                @if(question.ImageGuid.HasValue) {
                    <img src="@($"api/image/{question.ImageGuid}")" class="mb-2 quiz-image" style=""/>
                }
                @if(!string.IsNullOrWhiteSpace(question.Description)) {
                    <p class="p-3 w-100 border">@question.Description</p>
                }
                
                
            </div>
            @if(Session.State == SessionState.QuestionActive) {
                @if(question.QuestionType == Question.Type.Choice) {
                    <div class="options w-100 mb-3">
                        @foreach(var c in Session.CurrentQuestion.Choices ?? Enumerable.Empty<Choice>()) {
                            <div class="quiz-check position-relative py-2 px-3 my-2">
                                <span>@c.Text</span>
                            </div>
                        }
                    </div>
                }
                <p>Answers: @Session.NumberOfAnswersSent/@Session.ParticipantCount</p>
                <button @onclick="EndQuestion" type="button" class="btn btn-primary">End question</button>
            }
            else {
                @if (Session.CurrentQuestion.QuestionType == Question.Type.Choice)
                {
                    foreach (var ans in Session.CurrentQuestion.Choices)
                    {
                        int chosenBy = Session.Participants.Count(x => x.Answers.ContainsKey(Session.CurrentQuestion.Id) &&  x.Answers[Session.CurrentQuestion.Id].Contains(ans.Text));
                        double percentage = chosenBy == 0?0:Math.Round((double)chosenBy / Session.ParticipantCount * 100,1);
                        <p class="attrtest" style="--progress: 50%;"></p>
                        <div class="quiz-option @(ans.Valid?"correct":"")">
                            <div style="--progress: @percentage%;" class="quiz-option-progress @(percentage == 100 ? "full":"")"></div>
                            <div style="--progress: @percentage%;" class="w-100 my-2 d-flex quiz-option-label">
                                <span style="height: 100%; margin-left: 10px;">@ans.Text</span>
                                <span class="d-block mx-2">
                                    @if(ans.Valid) {
                                        <i class="bi bi-check-lg"></i>
                                    }
                                    @chosenBy (@percentage%)
                                </span>
                            </div> 
                        </div>
                        
                        @*<div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@ans.Text</div>
                        </div>
                        <p>The answer was chosen by @Session.Participants.Count(x => x.Answers.ContainsKey(Session.CurrentQuestion.Id) &&  x.Answers[Session.CurrentQuestion.Id].Contains(ans.Text))</p>
                        *@
                    }
                }
                else
                {
                    <h2>Correct answers</h2>
                    foreach(var ans in Session.CurrentQuestion.Choices.Select(x=>x.Text)) {
                        <p>@ans</p>
                        <p>The answer was chosen by @Session.Participants.Count(x => x.Answers.ContainsKey(Session.CurrentQuestion.Id) && x.Answers[Session.CurrentQuestion.Id].Contains(ans))</p>
                    }
                    <h2>Other answers</h2>
                    foreach (var ans in Session.Participants.SelectMany(x=>x.Answers.ContainsKey(Session.CurrentQuestion.Id)?x.Answers[Session.CurrentQuestion.Id]:Enumerable.Empty<string>()).Distinct().Except(Session.CurrentQuestion.Choices.Select(x=>x.Text)))
                    {
                    // Ezt kell �talak�tani, Bels� divbe mehet amit meg akarsz jelen�teni, aria-valuenow="25" - jelenlegi �ll�s, majd ezt kell megadni a hossz� querrys ar�nnyal, (aria-valuemin="0" aria-valuemax="100") - ezek defaultok
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@ans</div>
                        </div>
                        <p>The answer was chosen by @Session.Participants.Count(x => x.Answers.ContainsKey(Session.CurrentQuestion.Id) && x.Answers[Session.CurrentQuestion.Id].Contains(ans))</p>
                    }
                }
                <button @onclick="Session.NextQuestion">Next question</button>
            }
            
        </div> 
    }


    @if(Session.State == SessionState.End) {
        <div class="row w-100">
            <div class="row w-50 mx-auto">
                    <p class="text-center">Quiz has ended</p>
                    <a class="btn btn-primary mx-auto" href="/">Back to Main Menu</a>
            </div>
            
        </div>
    }
}

@code {
    [Parameter]
    public string sessionId {get;set;}
    private Session? Session {get; set;}

    private LocalState State {get;set;}

    private int SecondsRemaining {get;set;}

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private void EndQuestion() {
        Session.EndQuestion();
    }

    protected override async Task OnInitializedAsync() {
        //try to join session
        var authState = await authenticationState;

        var session = sessionService.Sessions.FirstOrDefault(x=>x.Id == sessionId && x.OwnerId == authState.User.Claims.First(y=>y.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
        if(session is null) {
            State = LocalState.Error;
            return;
        }
        Session = session;
        State = LocalState.Active;

        Session.StateChanged += (state) => InvokeAsync(StateHasChanged);

        Session.ShouldRefreshInformation+=()=>InvokeAsync(StateHasChanged);
        //Session.TimerTick += (s, seconds) => {SecondsRemaining = seconds; InvokeAsync(StateHasChanged);};
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    enum LocalState {
        Starting, Active, Error
    }
}
