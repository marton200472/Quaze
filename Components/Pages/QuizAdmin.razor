@page "/admin/quiz/{sessionId}"
@inject SessionService sessionService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]

@if(State == LocalState.Error) {
    <p>Error</p>
}

@if(State == LocalState.Active) {
    <h1>@Session.Quiz.Title</h1>
    @if(Session.State == SessionState.WaitStart) {
        <h1>Session Id: @Session.Id</h1>
        <button @onclick="Session.StartQuiz">Start Quiz</button>
    }

    @if(Session.State == SessionState.QuestionActive) {
        var question = Session.CurrentQuestion;
        <h2>@question.Title</h2>
        <p>@question.Description</p>
        <p>@TimeSpan.FromSeconds(SecondsRemaining).ToString()</p>
    }

    @if(Session.State == SessionState.QuestionEnd) {
        <button @onclick="Session.NextQuestion">Next question</button>
    }

    @if(Session.State == SessionState.End) {
        <p>Quiz has ended</p>
    }
}


@code {
    [Parameter]
    public string sessionId {get;set;}
    private Session? Session {get; set;}

    private LocalState State {get;set;}

    private int SecondsRemaining {get;set;}

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    protected override async Task OnInitializedAsync() {
        //try to join session
        var authState = await authenticationState;

        var session = sessionService.Sessions.FirstOrDefault(x=>x.Id == sessionId && x.OwnerId == authState.User.Claims.First(x=>x.Type == ClaimTypes.NameIdentifier).Value);
        if(session is null) {
            State = LocalState.Error;
            return;
        }
        Session = session;
        State = LocalState.Active;

        Session.StateChanged += (sender, state) => {InvokeAsync(StateHasChanged);};
        Session.TimerTick += (s, seconds) => {SecondsRemaining = seconds; InvokeAsync(StateHasChanged);};
    }

    enum LocalState {
        Starting, Active, Error
    }
}
