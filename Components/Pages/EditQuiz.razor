@page "/editquiz/{QuizId:int}"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navManager
@inject Microsoft.EntityFrameworkCore.IDbContextFactory<QuazeDbContext> dbFactory
@rendermode InteractiveServer

<div class="container">
    @if (quiz is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="form-group m-auto">
            <div class="form-group mb-5">
                
                <div class="row">
                    <div class="col-md-7 d-flex flex-column">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="quiz.Title" @onfocusout="SaveQuiz" class="form-control form-control-lg mb-2" placeholder="Enter title..." id="fltlblforquiztitle" />
                            <label for="fltlblforquiztitle">Title</label>
                        </div>
                        <div class="form-floating flex-fill">
                            <InputTextArea @bind-Value="quiz.Description" @onfocusout="SaveQuiz" class="form-control h-100" id="fltlblforquizdesc" style="resize: none; min-height: 120px;"/>
                            <label for="fltlblforquizdesc">Description</label>
                        </div>
                    </div>
                    <div class="col-md-5">
                        @if(quiz.ImageGuid.HasValue) {
                            <div class="position-relative">
                                <img src="@($"/api/image/{quiz.ImageGuid}")" class="w-100" />
                                <button @onclick="()=>{quiz.ImageGuid = null; _= SaveQuiz();}" class="btn btn-danger align-content-center position-absolute" style="right: 5pt; top: 5pt;">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                    </svg>
                                </button>
                            </div>
                            
                        }
                        else {
                            <FileUpload DisplayText="Title Image" OnImageChanged="guid=>{quiz.ImageGuid = guid; _ = SaveQuiz(); InvokeAsync(StateHasChanged);}"/>
                        }
                    </div>
                    
                </div>
                
                
                
            </div>
            @foreach (var question in quiz.Questions)
            {
                <div class="container mb-2 border border-primary border-5 rounded p-3">
                    <div class="row">
                        <div class="col">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="question.Title" @onfocusout="SaveQuiz" class="form-control mb-2" id="fltlblforquestiontitle" />
                                <label for="fltlblforquestiontitle">Title</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating mb-3">
                                <InputTextArea @bind-Value="question.Description" @onfocusout="SaveQuiz" class="form-control mb-2" id="fltlblforquestiondesc" />
                                <label for="fltlblforquestiondesc">Description</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-floating mb-3">
                                <InputNumber @bind-Value="question.TimeLimit" @onfocusout="SaveQuiz" class="form-control mb-2" id="lofazs2" />
                                <label for="lofazs2">Time in seconds</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating mb-3">
                                <InputSelect @bind-Value="question.QuestionType" @onfocusout="SaveQuiz" class="form-select mb-2" id="lofazs3">
                                    <option value="@Question.Type.Choice">Choice</option>
                                    <option value="@Question.Type.Open">Open-Word</option>
                                </InputSelect>
                                <label for="lofazs3">Type</label>
                            </div>
                        </div>
                    </div>
                    <div>
                        @if(question.ImageGuid.HasValue) {
                            <div class="position-relative">
                                <img src="@($"/api/image/{question.ImageGuid}")" class="w-100" />
                                <button @onclick="()=>{question.ImageGuid = null; _= SaveQuiz();}" class="btn btn-danger align-content-center position-absolute" style="right: 5pt; top: 5pt;">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                    </svg>
                                </button>
                            </div>
                            
                        }
                        else {
                            <div class="mb-3">
                                <FileUpload OnImageChanged="g=>{question.ImageGuid = g; _=SaveQuiz(); InvokeAsync(StateHasChanged);}" DisplayText="Image" />
                            </div>
                        }
                    </div>
                    @if (question.QuestionType == Question.Type.Choice)
                    {
                        foreach (var choice in question.Choices)
                        {
                            <div class="container">
                                <div class="row">
                                    <div class="col-1">
                                        <InputCheckbox @bind-Value="choice.Valid" @onclick="SaveQuiz" class="form-check" />
                                    </div>
                                    <div class="form-floating col-8">
                                        <InputText @bind-Value="choice.Text"  @onfocusout="SaveQuiz" class="form-control mb-2" id="lofazs" />
                                        <label for="lofazs">Text</label>
                                    </div>
                                    <div class="col">
                                        <button @onclick="()=>RemoveOption(question, choice)" class="btn btn-danger align-content-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                        <button @onclick="()=>AddOption(question)" class="btn btn-primary mb-2">Add Choice</button>
                    }
                    else
                    {
                        int choiceI = 1;
                        foreach (var answer in question.Choices)
                        {   
                            
                            <div class="row align-items-center my-1">
                                <div class="col">
                                    <div class="form-floating">
                                        <InputText @bind-Value="answer.Text" @onfocusout="SaveQuiz" class="form-control" id="@(question.Id + "-answer-"+choiceI)" />
                                        <label for="@(question.Id + "-answer-"+choiceI)">Answer</label>
                                    </div>
                                    
                                </div>
                            
                                <div class="col-2">
                                    <button @onclick="()=>RemoveOption(question, answer)" class="btn btn-danger align-content-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            choiceI++;   
                        }
                        <button @onclick="()=>AddOption(question)" class="btn btn-primary mb-2">Add Choice</button>
                    }
                    <button @onclick="()=>RemoveQ(question)" class="btn btn-danger float-end">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
                </div>
            }
            <button @onclick="AddQ" type="button" class="btn btn-primary mt-3">Add question</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? QuizId { get; set; }

    private Models.Quiz? quiz { get; set; }

    private bool ShouldSave {get;set;}

    private QuazeDbContext db {get;set;}

    protected override async Task OnInitializedAsync()
    {
        db=await dbFactory.CreateDbContextAsync();
        if (QuizId is null)
        {
            quiz = new Models.Quiz();
            db.Quizes.Add(quiz);
            await db.SaveChangesAsync();
        }
        else
        {
            quiz = await db.Quizes.Include(x=>x.Questions).SingleOrDefaultAsync(x=>x.Id == QuizId);
        }
    }

    private async Task AddOption(Question q)
    {
        q.Choices.Add(new Choice() { Text = "", Valid = false });
        db.Update(q);
        await db.SaveChangesAsync();
    }

    private async Task RemoveOption(Question q, Choice c)
    {
        q.Choices.Remove(c);
        db.Update(q);
        await db.SaveChangesAsync();
    }

    private async Task AddQ()
    {
        quiz.Questions.Add(new Question() { QuestionType = Question.Type.Choice });
        await db.SaveChangesAsync();
    }

    private async Task RemoveQ(Question q)
    {
        quiz.Questions.Remove(q);
        db.Remove(q);
        await db.SaveChangesAsync();
    }

    private async Task SaveQuiz()
    {
        db.UpdateRange(quiz.Questions);
        await db.SaveChangesAsync();
    }

    
}
