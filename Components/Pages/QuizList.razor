@page "/quizlist"
@attribute [StreamRendering]
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<QuazeDbContext> dbFactory
@inject SignInManager<User> signinManager
@inject UserManager<User> userManager
@inject NavigationManager navManager
@inject SessionService sessionService

<button @onclick="CreateNewAsync">New Quiz</button>

@if(Quizzes is null) {
    <p>Loading...</p>
}
else {
    <section class="text-center">
        <h1>Here are your quizzes!</h1>
    </section>
    <div class="album py-5 bg-light">
        <div class="container">
            <div class="row">
                @foreach(var q in Quizzes) {
                    <div class="col-md-4">
                        <div class="card mb-4 box-shadow">
                            <img class="card-img-top" src="https://www.dreamstime.com/illustration/png-background-empty-pattern.html" />
                            <div class="card-body">
                                <h3>@q.Title</h3>
                                <p>@q.Description</p>
                                <button class="btn btn-primary" @onclick="()=>StartQuizSession(q)">Start</button>
                                <button class="btn btn-secondary" @onclick="()=>EditQuiz(q)">Edit</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    private List<Models.Quiz>? Quizzes {get;set;}
    
    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState {get;set;}

    private User? LocalUser {get;set;}

    private async Task StartQuizSession(Models.Quiz q) {
        var id = await sessionService.StartNewSessionAsync(q);
        navManager.NavigateTo($"/admin/quiz/{id}",true);
    }

    private void EditQuiz(Models.Quiz q) {
        navManager.NavigateTo($"/editquiz/{q.Id}");
    }

    private async Task CreateNewAsync() {
        var nq = new Models.Quiz();
        nq.Owner = LocalUser;
        using var db = await dbFactory.CreateDbContextAsync();
        db.Attach(LocalUser);
        db.Quizes.Add(nq);
        await db.SaveChangesAsync();
        navManager.NavigateTo($"/editquiz/{nq.Id}",true);
    }

    protected override async Task OnInitializedAsync() {
        var authState = await authenticationState;
        var user = await userManager.FindByNameAsync(authState.User.Identity.Name);
        LocalUser = user;
        using var db = await dbFactory.CreateDbContextAsync();
        Quizzes = await db.Quizes.Where(x=>x.Owner == user).ToListAsync();
    }
}
